const MODEL_URL = './my_model/';
let model, webcam, currentMode = 'webcam';
let isWebcamActive = false; 
let isModelLoaded = false;
let currentImageData = null;
let webcamMode = 'continuous';
let currentView = 'home'; 
let isModalOpen = false;
let lastTopPrediction = null;
let preferredFacing = 'environment';

async function initApp() {
    console.log(' Iniciando Clasificador de Basura');
    updateStatus('Verificando librer√≠as...', 'loading');

    if (typeof tf === 'undefined') {
        updateStatus(' TensorFlow.js no cargado', 'error');
        return;
    }

    if (typeof tmImage === 'undefined') {
        updateStatus(' Teachable Machine no cargado', 'error');
        return;
    }

    console.log('Librer√≠as cargadas correctamente');

    await loadModel();

    setupEventListeners();
    showSection('webcam-section');

    if (isModelLoaded) {
        setTimeout(async () => {
            await initWebcam();
        }, 300);
    }
    if (isModelLoaded && currentMode === 'webcam') {
    console.log('Inicializando c√°mara autom√°ticamente...');
    setTimeout(async () => {
        await initWebcam();
    }, 500);
}

}

async function loadModel() {
    try {
        updateStatus('Cargando modelo de Techable Machine');

        const modelResponse = await fetch(MODEL_URL + 'model.json');
        if (!modelResponse.ok) {
            throw new Error('model.json no encontrado. Aseg√∫rate de tener la carpeta my_model/ con los archivos del modelo.');
        }

        const metadataResponse = await fetch(MODEL_URL + 'metadata.json');
        if (!metadataResponse.ok) {
            throw new Error('metadata.json no encontrado en la carpeta my_model/');
        }

        model = await tmImage.load(MODEL_URL + 'model.json', MODEL_URL + 'metadata.json');
        console.log('Modelo cargado:', model);

        isModelLoaded = true;
        updateStatus('Modelo cargado correctamente', 'success');

if (typeof currentMode !== 'undefined' && currentMode === 'webcam') {
    console.log('Modelo cargado, iniciando c√°mara autom√°ticamente...');
    setTimeout(async () => {
        try {
            await initWebcam();
        } catch (err) {
            console.error('Error iniciando webcam autom√°ticamente:', err);
            updateStatus('Error al iniciar la c√°mara autom√°ticamente', 'error');
        }

    }, 300); 
}

    } catch (error) {
        console.error(' Error cargando modelo:', error);
        updateStatus(`Error: ${error.message}`, 'error');
        isModelLoaded = false;
    }
}
async function initWebcam() {
    console.log(' Iniciando c√°mara...');

    if (!isModelLoaded) {
        updateStatus('Modelo de basura no cargado', 'error');
        return;
    }

    if (isWebcamActive && webcam && webcam.playing) {
        console.log('C√°mara ya activa, saliendo');
        return;
    }

    const video = document.getElementById('webcam');
    if (!video) return console.error("No se encontr√≥ el elemento <video>");

    if (window.webcamStream) {
        window.webcamStream.getTracks().forEach(track => track.stop());
    }

    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    console.log('Dispositivo detectado:', isMobile ? 'M√≥vil' : 'Escritorio');

    let stream = null;
    let cameraUsed = '';

    if (isMobile) {
        console.log(' M√≥vil detectado - Forzando c√°mara trasera con facingMode: environment');
        try {
            stream = await navigator.mediaDevices.getUserMedia({
            video: {
                    facingMode: { exact: 'environment' },
                width: { ideal: 1920 },
                height: { ideal: 1080 }
            }
            });
            cameraUsed = 'Trasera (m√≥vil)';
            console.log(' C√°mara trasera activada en m√≥vil');
        } catch (error) {
            console.warn(' No se pudo usar facingMode environment en m√≥vil:', error);
        }
    }

    if (!stream) {
        console.log('üîç Buscando c√°mara trasera por etiquetas...');
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
            const videoDevices = devices.filter(d => d.kind === 'videoinput');

            const backCamera = videoDevices.find(d => {
                const label = d.label.toLowerCase();
                return /back|rear|environment|main|primary|trasera|traser|rear camera|back camera/i.test(label);
            });

            if (backCamera) {
                console.log('C√°mara trasera encontrada:', backCamera.label);
                stream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        deviceId: { exact: backCamera.deviceId },
                        width: { ideal: 1920 },
                        height: { ideal: 1080 }
                    }
                });
                cameraUsed = `Trasera (${backCamera.label})`;
                console.log('C√°mara trasera activada por deviceId');
            }
        } catch (error) {
            console.warn('Error buscando c√°mara trasera por etiquetas:', error);
        }
    }

    if (!stream) {
        console.log('üîÑ Fallback: Intentando facingMode environment ideal...');
        try {
            stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    facingMode: { ideal: 'environment' },
                    width: { ideal: 1920 },
                    height: { ideal: 1080 }
                }
            });
            cameraUsed = 'Camara';
            console.log('‚úÖ C√°mara trasera activada (fallback)');
        } catch (error) {
            console.warn('‚ùå Fallback environment fall√≥:', error);
        }
    }

    if (!stream && !isMobile) {
        console.log('üîÑ √öltimo recurso: Usando c√°mara frontal en escritorio...');
        try {
            stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    facingMode: 'user',
                    width: { ideal: 1920 },
                    height: { ideal: 1080 }
                }
            });
            cameraUsed = 'Frontal (√∫ltimo recurso)';
            console.log(' C√°mara frontal activada como √∫ltimo recurso');
        } catch (error) {
            console.error(' No se pudo acceder a ninguna c√°mara:', error);
            alert("No se pudo acceder a la c√°mara. Revisa los permisos.");
            return;
        }
    }

    if (!stream) {
        console.error('No se pudo acceder a ninguna c√°mara');
        alert("No se pudo acceder a la c√°mara. Revisa los permisos.");
        return;
    }

    window.webcamStream = stream;
    video.srcObject = stream;
    video.style.transform = "none"; 
    await new Promise(resolve => {
        video.onloadedmetadata = () => {
            video.play();
            resolve();
        };
    });

    const flip = false;
    webcam = new tmImage.Webcam(640, 480, flip);

    const canvas = document.getElementById('webcam-canvas');
    if (canvas) {
        canvas.width = video.videoWidth || 640;
        canvas.height = video.videoHeight || 480;
        canvas.style.display = 'block';
    }
    if (video) {
        video.style.display = 'none';
    }

    isWebcamActive = true;

    let statusMessage = `üì∑ ${cameraUsed} activa`;
        if (webcamMode === 'continuous') {
        statusMessage += ' - Muestra un objeto para clasificar';
        } else {
        statusMessage += ' - Presiona "Capturar" para analizar';
        }
        updateStatus(statusMessage, 'success');

            predictWebcam();
}



async function predictWebcam() {
    if (currentMode !== 'webcam') return;

    const video = document.getElementById('webcam');
    const canvas = document.getElementById('webcam-canvas');
    if (!video || !canvas) return;

    if (video.readyState < 2 || video.videoWidth === 0 || video.videoHeight === 0) {
        requestAnimationFrame(predictWebcam);
        return;
    }

    if (canvas.width !== video.videoWidth || canvas.height !== video.videoHeight) {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
    }

    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    if (webcamMode === 'continuous') {
        currentImageData = canvas.toDataURL('image/jpeg', 0.8);
            const predictions = await model.predict(canvas);
            displayPrediction(predictions);
    }

    requestAnimationFrame(predictWebcam);
}

function setupEventListeners() {

    const uploadArea = document.querySelector('.upload-area');

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleImageFile(files[0]);
        }
    });

    document.getElementById('file-input').addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleImageFile(e.target.files[0]);
        }
    });

    document.addEventListener('click', (e) => {
        const content = document.getElementById('recycling-content');
        const toggleBtn = document.querySelector('.info-toggle-btn');
        if (!content) return;
        const clickInsideContent = content.contains(e.target);
        const clickOnToggle = toggleBtn && toggleBtn.contains(e.target);
        if (content.classList.contains('show') && !clickInsideContent && !clickOnToggle) {
            content.classList.remove('show');
            if (toggleBtn) toggleBtn.classList.remove('active');
        }
    });
}

function switchMode(mode) {
    currentMode = mode;
    
    clearResults();
    
    const recyclingContent = document.getElementById('recycling-content');
    const toggleBtn = document.querySelector('.info-toggle-btn');
    if (recyclingContent) recyclingContent.classList.remove('show');
    if (toggleBtn) toggleBtn.classList.remove('active');

    document.querySelectorAll('.mode-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');

    if (mode === 'webcam') {
        document.getElementById('webcam-section').style.display = 'flex';
        document.getElementById('upload-section').style.display = 'none';

        if (isModelLoaded) {
            initWebcam();
        }
    } else {
        document.getElementById('webcam-section').style.display = 'none';
        document.getElementById('upload-section').style.display = 'flex';

        if (webcam) {
            try {
                if (typeof webcam.stop === 'function') webcam.stop();
                if (webcam.video && webcam.video.srcObject) {
                    const tracks = webcam.video.srcObject.getTracks();
                    tracks.forEach(t => t.stop());
                }
            } catch (e) {
                console.warn('Error deteniendo webcam:', e);
            }
            webcam = null;
            isWebcamActive = false;
        }

        const canvas = document.getElementById('webcam-canvas');
        if (canvas) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            canvas.style.display = 'none';
        }

        const preview = document.getElementById('preview-image');
        if (preview) {
            preview.src = '';
            preview.style.display = 'none';
        }

        const classifyBtn = document.getElementById('classify-image-btn');
        if (classifyBtn) classifyBtn.style.display = 'none';
    }

    const quickConfig = document.querySelector('.quick-config');
    if (quickConfig) {
        quickConfig.style.display = mode === 'upload' ? 'none' : '';
    }

    const captureControls = document.getElementById('capture-controls');
    if (captureControls) {
        if (mode === 'upload') captureControls.style.display = 'none';
        else captureControls.style.display = webcamMode === 'capture' ? 'block' : 'none';
    }
}

function handleImageFile(file) {
    if (!file.type.startsWith('image/')) {
        alert('Por favor selecciona un archivo de imagen v√°lido.');
        return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
        const img = document.getElementById('preview-image');
        img.src = e.target.result;
        img.style.display = 'block';

        document.getElementById('classify-image-btn').style.display = 'block';
        document.getElementById('prediction').textContent = 'Imagen cargada - Haz clic en "Clasificar"';
        document.getElementById('confidence').textContent = '';
    };
    reader.readAsDataURL(file);
}

async function classifyUploadedImage() {
    if (!isModelLoaded) {
        alert('El modelo no est√° cargado. Espera un momento e intenta de nuevo.');
        return;
    }

    const img = document.getElementById('preview-image');
    if (!img.src) {
        alert('Por favor selecciona una imagen primero.');
        return;
    }

    try {
        document.getElementById('prediction').innerHTML = '<div class="loading-spinner"></div>Clasificando...';
        document.getElementById('confidence').textContent = '';

        const predictions = await model.predict(img);
        displayPrediction(predictions);

    } catch (error) {
        console.error('Error clasificando imagen:', error);
        document.getElementById('prediction').textContent = ' Error al clasificar imagen';
    }
}

function displayPrediction(predictions) {
    const topPrediction = predictions.reduce((max, current) =>
        current.probability > max.probability ? current : max
    );

    const confidencePercent = (topPrediction.probability * 100);

    if (!isNaN(confidencePercent) && confidencePercent >= 90) {
        lastTopPrediction = { ...topPrediction };
    } else {
        lastTopPrediction = null;
    }

    if (isModalOpen) {
        console.log('Modal abierto ‚Äî no se actualiza la etiqueta');
        return;
    }

    renderTopPrediction(topPrediction);
}

function renderTopPrediction(topPrediction) {
    const label = formatLabel(topPrediction.className);
    const confidence = (topPrediction.probability * 100).toFixed(1);

    const wasteInfo = getWasteType(topPrediction.className);
    const typeLabel = wasteInfo.type === 'reciclable' ? '‚ôªÔ∏è Reciclable' :
        wasteInfo.type === 'organico' ? 'üå± Org√°nico' :
            wasteInfo.type === 'merma' ? 'üóëÔ∏è Merma' : '‚ùå No Reciclable';
    const typeClass = wasteInfo.type === 'reciclable' ? 'reciclable' :
        wasteInfo.type === 'organico' ? 'organico' :
            wasteInfo.type === 'merma' ? 'merma' : 'no-reciclable';
    const infoAvailable = wasteInfo.type !== 'info';

    const predictionDiv = document.getElementById('prediction');
    predictionDiv.innerHTML = '';

    const resultEl = document.createElement('div');
    resultEl.className = 'prediction-result';
    resultEl.textContent = label;

    const typeEl = document.createElement('div');
    typeEl.className = `waste-type-label ${typeClass}`;
    typeEl.textContent = typeLabel;

    const confidenceNum = parseFloat(confidence);
    if (!isNaN(confidenceNum) && confidenceNum >= 90) {
        predictionDiv.appendChild(resultEl);
        predictionDiv.appendChild(typeEl);

        updateRecyclingInfo(topPrediction.className);
    } else {
        const unknownBadge = document.createElement('div');
        unknownBadge.className = 'unknown-badge';
        unknownBadge.textContent = 'El modelo no fue entrenado para reconocer este objeto en espec√≠fico.';
        predictionDiv.appendChild(unknownBadge);
        updateRecyclingInfo(null);
    }

    const confEl = document.getElementById('confidence');
    if (confEl) confEl.textContent = `Confianza: ${confidence}%`;

    console.log('Predicci√≥n:', label, `(${confidence}%) - Tipo: ${wasteInfo.type}`);
}

function formatLabel(className) {
    const label = className.toLowerCase();
    if (label.includes('lata')) return 'Lata';
    if (label.includes('botella de vidrio')) return 'Botella de vidrio';
    if (label.includes('botella')) return 'Botella (pl√°stico)';
    if (label.includes('plato')) return 'Plato (duroport)';
    if (label.includes('vaso')) return 'Vaso (duroport)';
    if (label.includes('jugo')) return 'Caja de jugo (cart√≥n)';
    if (label.includes('pizza')) return 'Caja de pizza (cart√≥n)';
    if (label.includes('papel') || label.includes('carton') || label.includes('cart√≥n')) return 'Papel / Cart√≥n';
    if (label.includes('organico')) return 'Org√°nico';
    if (label.includes('manzana')) return 'Manzana';
    if (label.includes('banano') || label.includes('banana')) return 'Banano';
    if (label.includes('limon') || label.includes('lim√≥n')) return 'Lim√≥n';
    if (label.includes('huevo')) return 'Huevo (c√°scara)';
    if (label.includes('pi√±a') || label.includes('pina')) return 'Pi√±a';
    if (label.includes('merma') || label.includes('basura')) return 'Merma / Basura';
    if (label.includes('papaya') || label.includes('papaya')) return 'Papaya';
    if (label.includes('tomate')) return 'tomate';
    if (label.includes('no hay nada')) return 'No hay nada';

    return `${className}`;
}



function updateStatus(message, type) {
    const statusEl = document.getElementById('status');
    statusEl.innerHTML = type === 'loading' ?
        `<div class="loading-spinner"></div><p>${message}</p>` :
        `<p>${message}</p>`;

    statusEl.className = `status ${type}`;
    console.log(message);
}


function showSection(sectionId) {
    const webcamSection = document.getElementById('webcam-section');
    const uploadSection = document.getElementById('upload-section');

    if (!webcamSection || !uploadSection) {
        console.error('No se encontraron las secciones principales de la UI');
        return;
    }

    if (sectionId === 'webcam-section') {
        webcamSection.style.display = 'flex';
        uploadSection.style.display = 'none';
        initWebcam();
    } else if (sectionId === 'upload-section') {
        webcamSection.style.display = 'none';
        uploadSection.style.display = 'flex';
        stopWebcam();
    } else {
        console.error(`No se encontr√≥ la secci√≥n con id: ${sectionId}`);
        return;
    }

    const resultContainer = document.getElementById('result');
    const preview = document.getElementById('imagePreview');
    if (resultContainer) resultContainer.textContent = '';
    if (preview) preview.src = '';
}

function setWebcamMode(mode) {
    webcamMode = mode;

    clearResults();
    
    const recyclingContent = document.getElementById('recycling-content');
    const toggleBtn = document.querySelector('.info-toggle-btn');
    if (recyclingContent) recyclingContent.classList.remove('show');
    if (toggleBtn) toggleBtn.classList.remove('active');

    document.getElementById('continuous-mode-btn').classList.toggle('active', mode === 'continuous');
    document.getElementById('capture-mode-btn').classList.toggle('active', mode === 'capture');

    const captureControls = document.getElementById('capture-controls');
    captureControls.style.display = mode === 'capture' ? 'block' : 'none';

    if (webcam && currentMode === 'webcam') {
        initWebcam();
    }

    console.log(`Modo webcam cambiado a: ${mode}`);
}

async function captureAndClassify() {
    if (!model) {
        alert('Modelo no disponible');
        return;
    }

    try {
        const video = document.getElementById('webcam');
        const canvas = document.getElementById('webcam-canvas');
        if (!video || !canvas || video.readyState < 2) {
            updateStatus('C√°mara no lista', 'error');
            return;
        }
        const ctx = canvas.getContext('2d');
        if (canvas.width !== video.videoWidth || canvas.height !== video.videoHeight) {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
        }
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        currentImageData = canvas.toDataURL('image/jpeg', 0.8);

        const predictions = await model.predict(canvas);
        displayPrediction(predictions);

    } catch (error) {
        console.error('Error en captura y clasificaci√≥n:', error);
        updateStatus(' Error al procesar imagen', 'error');
    }
    
}
const recyclingInfo = {
    'lata': {
        type: 'reciclable',
        title: 'Lata de Aluminio',
        description: 'Las latas de aluminio se utilizan para envasar bebidas y alimentos. Son uno de los materiales m√°s valiosos y eficientes en el reciclaje: pueden reprocesarse infinitas veces sin perder calidad ni propiedades. Su reciclaje reduce notablemente la extracci√≥n de minerales y el consumo energ√©tico.',
        instructions: [
            'Aplasta la lata para reducir su volumen y facilitar el transporte',
            'Limpia cualquier residuo de bebida o alimento antes de desecharla',
            'Depos√≠tala en el contenedor amarillo destinado a envases met√°licos',
            'No es necesario retirar las etiquetas o tapas adheridas'
        ],
        tips: [
            'El aluminio reciclado conserva el 100% de su calidad original',
            'Reciclar una sola lata ahorra suficiente energ√≠a para mantener un televisor encendido durante 3 horas',
            'Separa las latas de aluminio de los metales ferrosos como el acero, que se reciclan por separado',
            'Guarda las latas limpias en una bolsa aparte para facilitar su entrega en puntos de acopio'
        ]
    },

    'botella': {
        type: 'reciclable',
        title: 'Botella de Pl√°stico (PET)',
        description: 'Las botellas de pl√°stico PET son los envases m√°s comunes para bebidas, productos de limpieza y otros l√≠quidos. Son ligeras, resistentes y completamente reciclables si se encuentran limpias y secas. El PET reciclado se usa en textiles, mobiliario y nuevas botellas.',
        instructions: [
            'Vac√≠a completamente el contenido de la botella',
            'Enjuaga con poca agua para eliminar residuos',
            'Aplasta la botella para ahorrar espacio en el contenedor',
            'Depos√≠tala en el contenedor amarillo de pl√°sticos',
            'Retira el tap√≥n y rec√≠clalo en el mismo contenedor'
        ],
        tips: [
            'El PET puede reciclarse varias veces, pero se degrada con el calor y la suciedad',
            'Una botella reciclada puede convertirse en fibra textil o mobiliario urbano',
            'Evita mezclar botellas PET con otros tipos de pl√°stico como PVC o HDPE',
            'Reutiliza las botellas solo temporalmente y no para almacenar l√≠quidos calientes'
        ]
    },

    'botella de vidrio': {
        type: 'reciclable',
        title: 'Botella de Vidrio',
        description: 'Las botellas de vidrio son envases duraderos y 100% reciclables. Su proceso de reciclaje no genera p√©rdida de calidad y permite reducir significativamente el consumo de energ√≠a y materias primas.',
        instructions: [
            'Vac√≠a completamente el contenido de la botella',
            'No es necesario lavarla en exceso; basta eliminar residuos visibles',
            'Depos√≠tala en el contenedor verde destinado al vidrio',
            'Retira los tapones de metal o corcho antes de depositarla',
            'Si tu municipio lo solicita, separa por color (verde, √°mbar o transparente)'
        ],
        tips: [
            'El vidrio puede reciclarse infinitamente sin perder calidad',
            'Una botella reciclada ahorra la energ√≠a necesaria para encender una bombilla durante 4 horas',
            'No deposites vidrios planos, espejos o cer√°micas en el mismo contenedor',
            'Reutiliza botellas retornables siempre que sea posible'
        ]
    },

    'plato': {
        type: 'no-reciclable',
        title: 'Plato (duroport)',
        description: 'Los platos de duroport, fabricados con espuma de poliestireno expandido (EPS), son ligeros y t√©rmicos, pero altamente contaminantes. Este material no se recicla en la mayor√≠a de los sistemas locales debido a su baja densidad, dificultad de limpieza y escaso valor comercial.',
        instructions: [
            'Depos√≠talo en el contenedor gris o negro destinado a residuos no reciclables',
            'No lo quemes: al hacerlo libera gases t√≥xicos como el estireno y el benceno',
            'Evita desecharlo en la naturaleza, ya que se fragmenta en micropl√°sticos',
            'Si est√° limpio y en buen estado, reutil√≠zalo para manualidades o actividades educativas'
        ],
        tips: [
            'El EPS no se recicla f√°cilmente por su baja rentabilidad',
            'Opta por platos compostables o reutilizables hechos de bamb√∫, bagazo o cart√≥n',
            'Algunos programas especializados aceptan duroport limpio; verifica en tu √°rea',
            'Evita productos de un solo uso siempre que sea posible'
        ]
    },

    'vaso': {
        type: 'no-reciclable',
        title: 'Vaso (duroport)',
        description: 'Los vasos de duroport o espuma de poliestireno son residuos no reciclables y altamente contaminantes. Su estructura ligera dificulta su procesamiento en plantas de reciclaje y contribuye a la contaminaci√≥n marina.',
        instructions: [
            'Depos√≠talo en el contenedor gris o negro de rechazo',
            'No lo incineres ni lo deseches al aire libre',
            'Si es reutilizable, l√≠mpialo y gu√°rdalo para nuevos usos'
        ],
        tips: [
            'El poliestireno expandido tarda m√°s de 400 a√±os en degradarse',
            'Prefiere vasos de materiales compostables o reutilizables como acero, vidrio o bamb√∫',
            'Evita productos de espuma en eventos y celebraciones masivas'
        ]
    },

    'jugo': {
        type: 'reciclable',
        title: 'Caja de Jugo (Tetra Pak)',
        description: 'Los envases de cart√≥n para jugos suelen estar hechos de varias capas (cart√≥n, pl√°stico y aluminio). Aunque reciclables, requieren tratamiento especializado para separar sus componentes.',
        instructions: [
            'Vac√≠a completamente el contenido',
            'Enjuaga ligeramente para evitar malos olores',
            'Aplasta la caja para ahorrar espacio',
            'Depos√≠tala en el contenedor amarillo o el designado para envases mixtos',
            'Retira el tap√≥n y depos√≠talo en el mismo contenedor'
        ],
        tips: [
            'El reciclaje del Tetra Pak requiere plantas especializadas que separan sus capas',
            'Confirma si tu municipio acepta este tipo de envases en la recolecci√≥n com√∫n',
            'Los materiales recuperados se utilizan para fabricar papel reciclado o l√°minas pl√°sticas',
            'Aseg√∫rate de entregarlos secos y limpios'
        ]
    },

    'pizza': {
        type: 'reciclable',
        title: 'Caja de Pizza (cart√≥n)',
        description: 'Las cajas de cart√≥n para pizza pueden reciclarse si no est√°n contaminadas con grasa o restos de comida. La parte limpia puede separarse y enviarse a reciclaje, mientras que la parte sucia debe desecharse o compostarse.',
        instructions: [
            'Si la caja est√° limpia, pliega y depos√≠tala en el contenedor azul o de papel/cart√≥n',
            'Si tiene grasa o restos, corta las secciones sucias y depos√≠talas en org√°nicos o rechazo',
            'Retira restos grandes de comida antes de reciclarla'
        ],
        tips: [
            'El cart√≥n limpio se recicla f√°cilmente en nuevos productos de papel',
            'Evita que el cart√≥n contaminado manche otros materiales reciclables',
            'Separa siempre la parte aceitosa para mejorar la eficiencia del reciclaje'
        ]
    },

    'organico': {
        type: 'organico',
        title: 'Residuo Org√°nico',
        description: 'Incluye restos de comida, frutas, verduras y materiales biodegradables. Son perfectos para compostaje, devolviendo nutrientes al suelo y reduciendo la cantidad de residuos enviados a vertederos.',
        instructions: [
            'Usa compostera dom√©stica o el contenedor marr√≥n de org√°nicos',
            'Corta los restos en trozos peque√±os para acelerar la descomposici√≥n',
            'No mezcles pl√°sticos ni metales',
            'Usa bolsas compostables si necesitas bolsa para su recolecci√≥n'
        ],
        tips: [
            'Mant√©n un equilibrio 2:1 entre material seco (cart√≥n, hojas) y h√∫medo (restos de cocina)',
            'Evita carnes y l√°cteos para prevenir malos olores',
            'El compost maduro mejora la fertilidad del suelo y retiene humedad'
        ]
    },

    'manzana': {
        type: 'organico',
        title: 'Manzana',
        description: 'Las manzanas y sus restos son ideales para compostaje. Aportan az√∫cares naturales que activan microorganismos beneficiosos y enriquecen el abono final.',
        instructions: [
            'Dep√≥sitala en tu compostera o en el contenedor marr√≥n de org√°nicos',
            'C√≥rtala en trozos para acelerar su descomposici√≥n',
            'Evita usar bolsas pl√°sticas; si es necesario, usa compostables',
            'Incluye coraz√≥n y semillas sin problema'
        ],
        tips: [
            'Se descompone en 2-4 semanas seg√∫n las condiciones del compost',
            'Aporta carbono y nutrientes esenciales',
            'Mezcla con hojas secas o cart√≥n para evitar exceso de humedad'
        ]
    },

    'banano': {
        type: 'organico',
        title: 'Banana/Pl√°tano',
        description: 'Las c√°scaras y restos de banana son ricas en potasio y minerales. Se descomponen r√°pidamente, aportando nutrientes ideales para flores y frutos.',
        instructions: [
            'Trocea las c√°scaras y a√±√°delas al compost o al contenedor marr√≥n',
            'Evita bolsas pl√°sticas; usa compostables o depos√≠talas directamente',
            'Incluye la fruta si est√° pasada o da√±ada'
        ],
        tips: [
            'Se descomponen en 1-2 semanas',
            'Aportan potasio, f√≥sforo y magnesio al compost',
            'Enterrarlas cerca de plantas mejora la floraci√≥n'
        ]
    },

    'limon': {
        type: 'organico',
        title: 'Lim√≥n',
        description: 'Los limones pueden compostarse en peque√±as cantidades. Aportan aceites y compuestos √°cidos que ayudan a mantener el equilibrio biol√≥gico del compost si se usan moderadamente.',
        instructions: [
            'Trocea las c√°scaras y m√©zclalas con material seco',
            'Dep√≥sitalo en tu compostera o en el contenedor marr√≥n',
            'Evita excederte para no acidificar el compost'
        ],
        tips: [
            'Se descompone en 2-3 semanas',
            'En peque√±as cantidades aporta aroma y repelencia natural a insectos',
            'Ideal mezclar con restos vegetales y hojas secas'
        ]
    },

    'huevo': {
        type: 'organico',
        title: 'Huevo',
        description: 'Las c√°scaras de huevo son una fuente natural de calcio. Trituradas, ayudan a reducir la acidez del compost y fortalecen los suelos.',
        instructions: [
            'Seca las c√°scaras y trit√∫ralas antes de compostar',
            'Depos√≠talas en el contenedor marr√≥n o en tu compostera',
            'Evita a√±adir grandes cantidades de restos cocidos o grasosos'
        ],
        tips: [
            'El calcio del huevo fortalece la estructura del suelo',
            'Cuanto m√°s trituradas est√©n las c√°scaras, m√°s r√°pido se integran',
            'Pueden colocarse directamente en las macetas como suplemento mineral'
        ]
    },

    'pi√±a': {
        type: 'organico',
        title: 'Pi√±a',
        description: 'La pi√±a y sus partes (c√°scara, coraz√≥n y hojas) son compostables y aportan enzimas que aceleran la descomposici√≥n de otros materiales.',
        instructions: [
            'Trocea los restos y a√±√°delos al compost o contenedor marr√≥n',
            'Evita bolsas pl√°sticas; usa compostables',
            'Equilibra con material seco para evitar exceso de humedad'
        ],
        tips: [
            'Las enzimas naturales ayudan al proceso de compostaje',
            'Se descompone en 3-4 semanas',
            'Aporta az√∫cares que alimentan microorganismos beneficiosos'
        ]
    },

    'carton de jugo': {
        type: 'reciclable',
        title: 'Cart√≥n de Jugo (con pajilla)',
        description: 'Los envases Tetra Pak combinan cart√≥n, pl√°stico y aluminio. Aunque su reciclaje es posible, requiere separaci√≥n industrial de sus capas. Su limpieza y compactaci√≥n facilitan el proceso.',
        instructions: [
            'Vac√≠a y enjuaga bien el envase',
            'Retira la pajilla y su envoltorio; depos√≠talos con los pl√°sticos',
            'Aplasta el envase para ahorrar espacio',
            'Depos√≠talo seco en el contenedor de envases o reciclaje mixto'
        ],
        tips: [
            'El reciclaje del Tetra Pak genera papel, pl√°sticos y aluminio reutilizables',
            'Confirma si tu municipio lo acepta en el contenedor amarillo',
            'Aseg√∫rate de entregarlo seco y limpio para facilitar su recuperaci√≥n'
        ]
    },

    'papel': {
        type: 'reciclable',
        title: 'Papel y Cart√≥n',
        description: 'El papel y el cart√≥n son materiales reciclables siempre que est√©n limpios y secos. Pueden reprocesarse hasta 6 veces para fabricar nuevos productos como cajas, cuadernos y cartulina.',
        instructions: [
            'Retira restos de comida, cinta o pl√°stico',
            'Dobla o aplasta para ahorrar espacio',
            'Depos√≠talo en el contenedor azul o el de papel/cart√≥n',
            'No incluyas papel encerado, plastificado o muy sucio'
        ],
        tips: [
            'El papel h√∫medo o con grasa no se recicla',
            'Reutiliza cajas y hojas antes de desecharlas',
            'Guarda los papeles limpios separados del resto de residuos'
        ]
    },

    'merma': {
        type: 'merma',
        title: 'Merma / Basura No Reciclable',
        description: 'Residuos que no pueden reutilizarse, reciclarse ni compostarse. Incluye objetos da√±ados, mezclas de materiales y art√≠culos de un solo uso sin valor de recuperaci√≥n.',
        instructions: [
            'Depos√≠talos en el contenedor gris o negro de rechazo',
            'Aseg√∫rate de que no contengan materiales peligrosos',
            'Si son objetos grandes, consulta el servicio de recolecci√≥n especial',
            'No los quemes ni los deseches en la naturaleza'
        ],
        tips: [
            'Reduce la generaci√≥n de merma eligiendo productos duraderos',
            'Ll√©valos a puntos limpios si el tama√±o o tipo lo requiere',
            'Destruye documentos o discos con datos personales antes de tirarlos',
            'Evita confundir residuos peligrosos con basura com√∫n (pilas, aceites, medicamentos van a puntos especiales)'
        ]
    },

    'tomate': {
        type: 'organico',
        title: 'Tomate',
        description: 'Los tomates aportan humedad y nutrientes al compost. Se descomponen r√°pidamente, ayudando a activar la fermentaci√≥n y enriqueciendo el abono.',
        instructions: [
            'Trocea los tomates y a√±√°delos al compost o al contenedor marr√≥n',
            'Evita bolsas pl√°sticas',
            'Incluye tallos o restos vegetales si est√°n sanos'
        ],
        tips: [
            'Aporta nitr√≥geno y vitaminas al compost',
            'Se descompone en 2-3 semanas',
            'Combina con material seco para evitar exceso de agua'
        ]
    },

    'papaya': {
        type: 'organico',
        title: 'Papaya',
        description: 'Las papayas y sus c√°scaras son compostables. Su alto contenido de agua las hace ideales para mantener la humedad del compost y aportar nutrientes.',
        instructions: [
            'Trocea las c√°scaras y restos antes de compostar',
            'Dep√≥sitalas en el contenedor marr√≥n si no compostas en casa',
            'Evita bolsas pl√°sticas; usa compostables o depos√≠talas directamente'
        ],
        tips: [
            'Se descompone en 1-2 semanas',
            'Aporta humedad y nutrientes esenciales',
            'Ideal combinar con cart√≥n seco para equilibrar la mezcla'
        ]
    },
    "dulces" : {
        type: 'merma',
        title: 'Dulces / Caramelos',
        description: 'La envoltura del dulce no es reciclable debido a su empaque. Est√° hecho de multiples capas de material: Plastico, alumminio y papel, que no se pueden separar en plantas de reciclaje.',
        instructions: 'Depos√≠talos en el contenedor gris o negro de rechazo',


    },
    "no hay nada" : {
        type: 'info',
        title: 'Informaci√≥n de Reciclaje',
        description: 'Coloca el objeto frente a la c√°mara o sube una imagen para obtener instrucciones espec√≠ficas de reciclaje. Mientras esperas, aqu√≠ tienes informaci√≥n pr√°ctica de reciclaje universal:',
    }
};

function getWasteType(label) {
    const normalizedLabel = label.toLowerCase().trim();

    for (const [key, info] of Object.entries(recyclingInfo)) {
        if (normalizedLabel.includes(key) || key.includes(normalizedLabel)) {
            return info;
        }
    }

    return {
        type: 'no-reciclable',
        title: 'Objeto Desconocido',
        description: 'No se pudo determinar el tipo de este objeto.',
        instructions: [
            'Consulta con tu servicio local de recolecci√≥n de basura',
            'Depos√≠talo en el contenedor gris si no est√°s seguro',
            'Evita tirarlo en la naturaleza'
        ],
        tips: [
            'Considera reutilizar el objeto si es posible',
            'Toma una foto m√°s clara para mejor identificaci√≥n'
        ]
    };

}
function toggleRecyclingInfo() {
    const recyclingContent = document.getElementById('recycling-content');
    const toggleBtn = document.querySelector('.info-toggle-btn');
    
    if (recyclingContent.classList.contains('show')) {
        recyclingContent.classList.remove('show');
        toggleBtn.classList.remove('active');
    } else {

        const labelToShow = lastTopPrediction && lastTopPrediction.className ? lastTopPrediction.className : null;
        updateRecyclingInfo(labelToShow);
        recyclingContent.classList.add('show');
        toggleBtn.classList.add('active');
    }
}

function updateRecyclingInfo(label) {
    let wasteInfo;

    if (!label) {
        wasteInfo = {
            type: 'info',
            title: 'Informaci√≥n de Reciclaje',
            description: 'Coloca el objeto frente a la c√°mara o sube una imagen para obtener instrucciones espec√≠ficas de reciclaje. Mientras esperas, aqu√≠ tienes informaci√≥n pr√°ctica de reciclaje universal:',
            instructions: [
                'Separa los residuos por tipo: papel/cart√≥n, pl√°stico, vidrio, metal, org√°nico y resto.',
                'Limpia los envases (vac√≠a y enjuaga) para evitar contaminaci√≥n.',
                'Aplasta cajas y botellas para ahorrar espacio en los contenedores.',
                'Deposita cada material en el contenedor correspondiente de tu municipio (p. ej. papel: azul, pl√°sticos/envases: amarillo, vidrio: verde, org√°nico: marr√≥n, resto: gris).'
            ],
            tips: [
                'Evita mezclar materiales; la mezcla contamina lotes de reciclaje.',
                'No deposites residuos peligrosos (pilas, aceites) en los contenedores comunes ‚Äî ll√©valos a puntos limpios.',
                'Si un envase est√° muy grasiento (ej. caja de pizza), considera depositar la parte contaminada en org√°nicos o rechazo seg√∫n normativa local.',
                'Reutiliza y reduce antes de reciclar: reutilizar una caja o botellas es mejor que reciclarlas.'
            ]
        };
    } else {
        wasteInfo = getWasteType(label);
    }

    const titleEl = document.getElementById('info-title');
    const descEl = document.getElementById('info-description');
    if (titleEl) titleEl.textContent = wasteInfo.title;
    if (descEl) descEl.textContent = wasteInfo.description;

    const typeElement = document.getElementById('info-type');
    if (typeElement) {
        if (wasteInfo.type === 'reciclable') {
            typeElement.textContent = '‚ôªÔ∏è Reciclable';
        } else if (wasteInfo.type === 'organico') {
            typeElement.textContent = 'üå± Org√°nico';
        } else if (wasteInfo.type === 'merma') {
            typeElement.textContent = 'üóëÔ∏è Merma';
        } else if (wasteInfo.type === 'info') {
            typeElement.textContent = '‚ÑπÔ∏è Informaci√≥n';
        } else {
            typeElement.textContent = '‚ùå No Reciclable';
        }
        typeElement.className = `info-type-badge ${wasteInfo.type}`;
    }

    const instructionsContainer = document.getElementById('info-instructions');
    const tipsContainer = document.getElementById('info-tips');

    if (instructionsContainer) {
        if (Array.isArray(wasteInfo.instructions) && wasteInfo.instructions.length > 0) {
            instructionsContainer.innerHTML = '<ul>' + wasteInfo.instructions.map(i => `<li>${i}</li>`).join('') + '</ul>';
        } else {
            instructionsContainer.innerHTML = '<p>No hay instrucciones espec√≠ficas para este objeto. Consulta las normas locales.</p>';
        }
    }

    if (tipsContainer) {
        if (Array.isArray(wasteInfo.tips) && wasteInfo.tips.length > 0) {
            tipsContainer.innerHTML = '<ul>' + wasteInfo.tips.map(t => `<li>${t}</li>`).join('') + '</ul>';
        } else {
            tipsContainer.innerHTML = '<p>No hay consejos adicionales disponibles.</p>';
        }
    }
}

function clearResults() {
    const pred = document.getElementById('prediction');
    const conf = document.getElementById('confidence');
    
    if (pred) pred.textContent = 'Esperando clasificaci√≥n...';
    if (conf) conf.textContent = '';
    
    lastTopPrediction = null;
    try {
        updateRecyclingInfo(null);
    } catch (e) {
        console.warn('clearResults: no se pudo actualizar recycling info:', e);
    }
    
    const recyclingContent = document.getElementById('recycling-content');
    const toggleBtn = document.querySelector('.info-toggle-btn');
    if (recyclingContent) recyclingContent.classList.remove('show');
    if (toggleBtn) toggleBtn.classList.remove('active');
}

window.addEventListener('DOMContentLoaded', initApp);