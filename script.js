const MODEL_URL = './my_model/';
let model, webcam, currentMode = 'webcam';
let isWebcamActive = false; 
let isModelLoaded = false;
let currentImageData = null;
let webcamMode = 'capture'; 
let currentView = 'home'; 
let isModalOpen = false;
let lastTopPrediction = null;
// usamos la camara trasera, primer intento
let preferredFacing = 'environment';

async function initApp() {
    console.log(' Iniciando Clasificador de Basura');
    updateStatus('Verificando librer√≠as...', 'loading');

    // esto verifica las librerias
    if (typeof tf === 'undefined') {
        updateStatus(' TensorFlow.js no cargado', 'error');
        return;
    }

    if (typeof tmImage === 'undefined') {
        updateStatus(' Teachable Machine no cargado', 'error');
        return;
    }

    console.log('Librer√≠as cargadas correctamente');

    // Carga el modelo
    await loadModel();

    setupEventListeners();
    showSection('webcam-section');

    if (isModelLoaded) {
        setTimeout(async () => {
            await initWebcam();
        }, 300);
    }
    if (isModelLoaded && currentMode === 'webcam') {
    console.log('Inicializando c√°mara autom√°ticamente...');
    setTimeout(async () => {
        await initWebcam();
    }, 500);
}

}

async function loadModel() {
    try {
        updateStatus('Cargando modelo de Techable Machine');

        const modelResponse = await fetch(MODEL_URL + 'model.json');
        if (!modelResponse.ok) {
            throw new Error('model.json no encontrado. Aseg√∫rate de tener la carpeta my_model/ con los archivos del modelo.');
        }

        const metadataResponse = await fetch(MODEL_URL + 'metadata.json');
        if (!metadataResponse.ok) {
            throw new Error('metadata.json no encontrado en la carpeta my_model/');
        }

        model = await tmImage.load(MODEL_URL + 'model.json', MODEL_URL + 'metadata.json');
        console.log('Modelo cargado:', model);

        isModelLoaded = true;
        updateStatus('Modelo cargado correctamente', 'success');

if (typeof currentMode !== 'undefined' && currentMode === 'webcam') {
    console.log('Modelo cargado, iniciando c√°mara autom√°ticamente...');
    setTimeout(async () => {
        try {
            await initWebcam();
        } catch (err) {
            console.error('Error iniciando webcam autom√°ticamente:', err);
            updateStatus('Error al iniciar la c√°mara autom√°ticamente', 'error');
        }

    }, 300); 
}

    } catch (error) {
        console.error(' Error cargando modelo:', error);
        updateStatus(`Error: ${error.message}`, 'error');
        isModelLoaded = false;
    }
}
async function initWebcam() {
    console.log(' Iniciando c√°mara...');

    if (!isModelLoaded) {
        updateStatus('Modelo de basura no cargado', 'error');
        return;
    }

    if (isWebcamActive && webcam && webcam.playing) {
        console.log('C√°mara ya activa, saliendo');
        return;
    }

    const video = document.getElementById('webcam');
    if (!video) return console.error("No se encontr√≥ el elemento <video>");

    if (window.webcamStream) {
        window.webcamStream.getTracks().forEach(track => track.stop());
    }

    // Detectar si es telefono o computadora
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    console.log('Dispositivo detectado:', isMobile ? 'M√≥vil' : 'Escritorio');

    let stream = null;
    let cameraUsed = '';

    // ESTRATEGIA 1: En telefonos, forzar la c√°mara trasera con facingMode exact
    if (isMobile) {
        console.log(' M√≥vil detectado - Forzando c√°mara trasera con facingMode: environment');
        try {
            stream = await navigator.mediaDevices.getUserMedia({
            video: {
                    facingMode: { exact: 'environment' },
                width: { ideal: 1920 },
                height: { ideal: 1080 }
            }
            });
            cameraUsed = 'Trasera (m√≥vil)';
            console.log(' C√°mara trasera activada en m√≥vil');
        } catch (error) {
            console.warn(' No se pudo usar facingMode environment en m√≥vil:', error);
        }
    }

    // ESTRATEGIA 2: Buscar c√°mara trasera por etiquetas (telefono y computadora)
    if (!stream) {
        console.log('üîç Buscando c√°mara trasera por etiquetas...');
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
            const videoDevices = devices.filter(d => d.kind === 'videoinput');

            // Buscar c√°mara trasera por etiquetas
            const backCamera = videoDevices.find(d => {
                const label = d.label.toLowerCase();
                return /back|rear|environment|main|primary|trasera|traser|rear camera|back camera/i.test(label);
            });

            if (backCamera) {
                console.log('C√°mara trasera encontrada:', backCamera.label);
                stream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        deviceId: { exact: backCamera.deviceId },
                        width: { ideal: 1920 },
                        height: { ideal: 1080 }
                    }
                });
                cameraUsed = `Trasera (${backCamera.label})`;
                console.log('C√°mara trasera activada por deviceId');
            }
        } catch (error) {
            console.warn('Error buscando c√°mara trasera por etiquetas:', error);
        }
    }

    // ESTRATEGIA 3: 
    if (!stream) {
        console.log('üîÑ Fallback: Intentando facingMode environment ideal...');
        try {
            stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    facingMode: { ideal: 'environment' },
                    width: { ideal: 1920 },
                    height: { ideal: 1080 }
                }
            });
            cameraUsed = 'Camara';
            console.log('‚úÖ C√°mara trasera activada (fallback)');
        } catch (error) {
            console.warn('‚ùå Fallback environment fall√≥:', error);
        }
    }

    // ESTRATEGIA 4: √öltimo recurso, la c√°mara frontal (solo en computadora)
    if (!stream && !isMobile) {
        console.log('üîÑ √öltimo recurso: Usando c√°mara frontal en escritorio...');
        try {
            stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    facingMode: 'user',
                    width: { ideal: 1920 },
                    height: { ideal: 1080 }
                }
            });
            cameraUsed = 'Frontal (√∫ltimo recurso)';
            console.log(' C√°mara frontal activada como √∫ltimo recurso');
        } catch (error) {
            console.error(' No se pudo acceder a ninguna c√°mara:', error);
            alert("No se pudo acceder a la c√°mara. Revisa los permisos.");
            return;
        }
    }

    // Si no se pudo obtener ninguna c√°mara
    if (!stream) {
        console.error('No se pudo acceder a ninguna c√°mara');
        alert("No se pudo acceder a la c√°mara. Revisa los permisos.");
        return;
    }

    // Configurar el video
    window.webcamStream = stream;
    video.srcObject = stream;
    video.style.transform = "none"; 
    await new Promise(resolve => {
        video.onloadedmetadata = () => {
            video.play();
            resolve();
        };
    });

    // Crear webcam para tmImage
    const flip = false;
    webcam = new tmImage.Webcam(640, 480, flip);

    const canvas = document.getElementById('webcam-canvas');
    if (canvas) {
        canvas.width = video.videoWidth || 640;
        canvas.height = video.videoHeight || 480;
        canvas.style.display = 'block';
    }
    if (video) {
        video.style.display = 'none';
    }

    isWebcamActive = true;

    let statusMessage = `üì∑ ${cameraUsed} activa`;
        if (webcamMode === 'continuous') {
        statusMessage += ' - Muestra un objeto para clasificar';
        } else {
        statusMessage += ' - Presiona "Capturar" para analizar';
        }
        updateStatus(statusMessage, 'success');

            predictWebcam();
}



async function predictWebcam() {
    if (currentMode !== 'webcam') return;

    const video = document.getElementById('webcam');
    const canvas = document.getElementById('webcam-canvas');
    if (!video || !canvas) return;

    if (video.readyState < 2 || video.videoWidth === 0 || video.videoHeight === 0) {
        requestAnimationFrame(predictWebcam);
        return;
    }

    if (canvas.width !== video.videoWidth || canvas.height !== video.videoHeight) {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
    }

    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    if (webcamMode === 'continuous') {
        currentImageData = canvas.toDataURL('image/jpeg', 0.8);
            const predictions = await model.predict(canvas);
            displayPrediction(predictions);
    }

    requestAnimationFrame(predictWebcam);
}

function setupEventListeners() {

    // Drag & Drop para im√°genes
    const uploadArea = document.querySelector('.upload-area');

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleImageFile(files[0]);
        }
    });

    // Input de archivo
    document.getElementById('file-input').addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleImageFile(e.target.files[0]);
        }
    });

    // Event listener para canvas eliminado - no necesario en modo individual

    // Cerrar men√∫ de informaci√≥n al hacer clic fuera
    document.addEventListener('click', (e) => {
        const content = document.getElementById('recycling-content');
        const toggleBtn = document.querySelector('.info-toggle-btn');
        if (!content) return;
        const clickInsideContent = content.contains(e.target);
        const clickOnToggle = toggleBtn && toggleBtn.contains(e.target);
        if (content.classList.contains('show') && !clickInsideContent && !clickOnToggle) {
            content.classList.remove('show');
            if (toggleBtn) toggleBtn.classList.remove('active');
        }
    });
}

function switchMode(mode) {
    currentMode = mode;
    
    // Limpiar resultados al cambiar de modo
    clearResults();
    
    // Ocultar men√∫ desplegable de informaci√≥n si est√° abierto
    const recyclingContent = document.getElementById('recycling-content');
    const toggleBtn = document.querySelector('.info-toggle-btn');
    if (recyclingContent) recyclingContent.classList.remove('show');
    if (toggleBtn) toggleBtn.classList.remove('active');

    // Actualizar botones
    document.querySelectorAll('.mode-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');

    // Mostrar/ocultar secciones
    if (mode === 'webcam') {
        document.getElementById('webcam-section').style.display = 'flex';
        document.getElementById('upload-section').style.display = 'none';

        if (isModelLoaded) {
            initWebcam();
        }
    } else {
        // Mostrar upload y ocultar webcam
        document.getElementById('webcam-section').style.display = 'none';
        document.getElementById('upload-section').style.display = 'flex';

        // Detener webcam si est√° activa
        if (webcam) {
            try {
                if (typeof webcam.stop === 'function') webcam.stop();
                if (webcam.video && webcam.video.srcObject) {
                    const tracks = webcam.video.srcObject.getTracks();
                    tracks.forEach(t => t.stop());
                }
            } catch (e) {
                console.warn('Error deteniendo webcam:', e);
            }
            webcam = null;
            isWebcamActive = false;
        }

        // Limpiar canvas de webcam
        const canvas = document.getElementById('webcam-canvas');
        if (canvas) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            canvas.style.display = 'none';
        }

        // Limpiar preview de upload
        const preview = document.getElementById('preview-image');
        if (preview) {
            preview.src = '';
            preview.style.display = 'none';
        }

        // Ocultar bot√≥n de clasificar
        const classifyBtn = document.getElementById('classify-image-btn');
        if (classifyBtn) classifyBtn.style.display = 'none';
    }

    // Mostrar u ocultar configuraciones espec√≠ficas de webcam
    const quickConfig = document.querySelector('.quick-config');
    if (quickConfig) {
        // ocultar las opciones de webcam cuando estamos en modo 'upload'
        quickConfig.style.display = mode === 'upload' ? 'none' : '';
    }

    // Asegurar que los controles de captura est√©n ocultos en modo upload
    const captureControls = document.getElementById('capture-controls');
    if (captureControls) {
        if (mode === 'upload') captureControls.style.display = 'none';
        // si volvemos a webcam, respetar el modo actual (capture/continuous)
        else captureControls.style.display = webcamMode === 'capture' ? 'block' : 'none';
    }
}

function handleImageFile(file) {
    if (!file.type.startsWith('image/')) {
        alert('Por favor selecciona un archivo de imagen v√°lido.');
        return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
        const img = document.getElementById('preview-image');
        img.src = e.target.result;
        img.style.display = 'block';

        document.getElementById('classify-image-btn').style.display = 'block';
        document.getElementById('prediction').textContent = 'Imagen cargada - Haz clic en "Clasificar"';
        document.getElementById('confidence').textContent = '';
    };
    reader.readAsDataURL(file);
}

async function classifyUploadedImage() {
    if (!isModelLoaded) {
        alert('El modelo no est√° cargado. Espera un momento e intenta de nuevo.');
        return;
    }

    const img = document.getElementById('preview-image');
    if (!img.src) {
        alert('Por favor selecciona una imagen primero.');
        return;
    }

    try {
        document.getElementById('prediction').innerHTML = '<div class="loading-spinner"></div>Clasificando...';
        document.getElementById('confidence').textContent = '';

        // Hacer predicci√≥n
        const predictions = await model.predict(img);
        displayPrediction(predictions);

    } catch (error) {
        console.error('Error clasificando imagen:', error);
        document.getElementById('prediction').textContent = ' Error al clasificar imagen';
    }
}

function displayPrediction(predictions) {
    // Encontrar la predicci√≥n con mayor confianza
    const topPrediction = predictions.reduce((max, current) =>
        current.probability > max.probability ? current : max
    );

    // Determinar la confianza en porcentaje
    const confidencePercent = (topPrediction.probability * 100);

    if (!isNaN(confidencePercent) && confidencePercent >= 90) {
        lastTopPrediction = { ...topPrediction };
    } else {
        lastTopPrediction = null;
    }

    // Si el modal est√° abierto, no actualizar la UI (evitar que cambie mientras el usuario lee)
    if (isModalOpen) {
        console.log('Modal abierto ‚Äî no se actualiza la etiqueta');
        return;
    }

    renderTopPrediction(topPrediction);
}

function renderTopPrediction(topPrediction) {
    const label = formatLabel(topPrediction.className);
    const confidence = (topPrediction.probability * 100).toFixed(1);

    const wasteInfo = getWasteType(topPrediction.className);
    const typeLabel = wasteInfo.type === 'reciclable' ? '‚ôªÔ∏è Reciclable' :
        wasteInfo.type === 'organico' ? 'üå± Org√°nico' :
            wasteInfo.type === 'merma' ? 'üóëÔ∏è Merma' : '‚ùå No Reciclable';
    const typeClass = wasteInfo.type === 'reciclable' ? 'reciclable' :
        wasteInfo.type === 'organico' ? 'organico' :
            wasteInfo.type === 'merma' ? 'merma' : 'no-reciclable';

    const predictionDiv = document.getElementById('prediction');
    predictionDiv.innerHTML = '';

    const resultEl = document.createElement('div');
    resultEl.className = 'prediction-result';
    resultEl.textContent = label;

    const typeEl = document.createElement('div');
    typeEl.className = `waste-type-label ${typeClass}`;
    typeEl.textContent = typeLabel;

    // Mostrar resultado solo si la confianza alcanza el umbral
    const confidenceNum = parseFloat(confidence);
    if (!isNaN(confidenceNum) && confidenceNum >= 90) {
        // Confianza suficiente: mostrar etiqueta, tipo y bot√≥n de informaci√≥n
        predictionDiv.appendChild(resultEl);
        predictionDiv.appendChild(typeEl);

        updateRecyclingInfo(topPrediction.className);
    } else {
        const unknownBadge = document.createElement('div');
        unknownBadge.className = 'unknown-badge';
        unknownBadge.textContent = 'El modelo no fue entrenado para reconocer este objeto en espec√≠fico.';
        predictionDiv.appendChild(unknownBadge);
        updateRecyclingInfo(null);
    }

    const confEl = document.getElementById('confidence');
    if (confEl) confEl.textContent = `Confianza: ${confidence}%`;

    console.log('Predicci√≥n:', label, `(${confidence}%) - Tipo: ${wasteInfo.type}`);
}

function formatLabel(className) {
    const label = className.toLowerCase();
    // Mapear etiquetas esperadas a textos legibles
    if (label.includes('lata')) return 'Lata';
    if (label.includes('botella de vidrio')) return 'Botella de vidrio';
    if (label.includes('botella')) return 'Botella (pl√°stico)';
    if (label.includes('plato')) return 'Plato (duroport)';
    if (label.includes('vaso')) return 'Vaso (duroport)';
    if (label.includes('jugo')) return 'Caja de jugo (cart√≥n)';
    if (label.includes('pizza')) return 'Caja de pizza (cart√≥n)';
    if (label.includes('papel') || label.includes('carton') || label.includes('cart√≥n')) return 'Papel / Cart√≥n';
    if (label.includes('organico')) return 'Org√°nico';
    if (label.includes('manzana')) return 'Manzana';
    if (label.includes('banano') || label.includes('banana')) return 'Banano';
    if (label.includes('limon') || label.includes('lim√≥n')) return 'Lim√≥n';
    if (label.includes('huevo')) return 'Huevo (c√°scara)';
    if (label.includes('pi√±a') || label.includes('pina')) return 'Pi√±a';
    if (label.includes('merma') || label.includes('basura')) return 'Merma / Basura';

    return `${className}`;
}



function updateStatus(message, type) {
    const statusEl = document.getElementById('status');
    statusEl.innerHTML = type === 'loading' ?
        `<div class="loading-spinner"></div><p>${message}</p>` :
        `<p>${message}</p>`;

    statusEl.className = `status ${type}`;
    console.log(message);
}


function showSection(sectionId) {
    const webcamSection = document.getElementById('webcam-section');
    const uploadSection = document.getElementById('upload-section');

    if (!webcamSection || !uploadSection) {
        console.error('No se encontraron las secciones principales de la UI');
        return;
    }

    // Mostrar/ocultar solo las secciones de contenido, sin tocar la vista contenedora
    if (sectionId === 'webcam-section') {
        webcamSection.style.display = 'flex';
        uploadSection.style.display = 'none';
        initWebcam();
    } else if (sectionId === 'upload-section') {
        webcamSection.style.display = 'none';
        uploadSection.style.display = 'flex';
        stopWebcam();
    } else {
        console.error(`No se encontr√≥ la secci√≥n con id: ${sectionId}`);
        return;
    }

    // Limpiar resultados y previsualizaciones al cambiar de secci√≥n
    const resultContainer = document.getElementById('result');
    const preview = document.getElementById('imagePreview');
    if (resultContainer) resultContainer.textContent = '';
    if (preview) preview.src = '';
}

function setWebcamMode(mode) {
    webcamMode = mode;

    clearResults();
    
    const recyclingContent = document.getElementById('recycling-content');
    const toggleBtn = document.querySelector('.info-toggle-btn');
    if (recyclingContent) recyclingContent.classList.remove('show');
    if (toggleBtn) toggleBtn.classList.remove('active');

    // Actualizar botones
    document.getElementById('continuous-mode-btn').classList.toggle('active', mode === 'continuous');
    document.getElementById('capture-mode-btn').classList.toggle('active', mode === 'capture');

    // Mostrar/ocultar controles de captura
    const captureControls = document.getElementById('capture-controls');
    captureControls.style.display = mode === 'capture' ? 'block' : 'none';

    // Reiniciar webcam si est√° activa
    if (webcam && currentMode === 'webcam') {
        initWebcam();
    }

    console.log(`Modo webcam cambiado a: ${mode}`);
}

async function captureAndClassify() {
    if (!model) {
        alert('Modelo no disponible');
        return;
    }

    try {
        const video = document.getElementById('webcam');
        const canvas = document.getElementById('webcam-canvas');
        if (!video || !canvas || video.readyState < 2) {
            updateStatus('C√°mara no lista', 'error');
            return;
        }
        const ctx = canvas.getContext('2d');
        if (canvas.width !== video.videoWidth || canvas.height !== video.videoHeight) {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
        }
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Guardar imagen para feedback
        currentImageData = canvas.toDataURL('image/jpeg', 0.8);

        // Modo individual: usar imagen completa
        const predictions = await model.predict(canvas);
        displayPrediction(predictions);

    } catch (error) {
        console.error('Error en captura y clasificaci√≥n:', error);
        updateStatus(' Error al procesar imagen', 'error');
    }
    
}
const recyclingInfo = {
    'lata': {
        type: 'reciclable',
        title: 'Lata de Aluminio',
        description: 'Las latas de aluminio son envases met√°licos que contienen bebidas, alimentos u otros productos.',
        instructions: [
            'Aplasta la lata para reducir su volumen',
            'Limpia cualquier residuo de comida o bebida',
            'Depos√≠tala en el contenedor amarillo destinado a envases met√°licos',
            'No es necesario quitar las etiquetas de papel'
        ],
        tips: [
            'Las latas se reciclan infinitamente sin perder calidad',
            'El reciclaje de una sola lata ahorra energ√≠a suficiente para alimentar un televisor durante 3 horas',
            'Separa las latas de otros metales como el acero'
        ]
    },
    'botella': {
        type: 'reciclable',
        title: 'Botella de Pl√°stico',
        description: 'Las botellas de pl√°stico PET son envases comunes para bebidas, productos de limpieza y otros l√≠quidos.',
        instructions: [
            'Vac√≠a completamente el contenido de la botella',
            'Enjuaga con agua para eliminar residuos',
            'Aplasta la botella para reducir espacio',
            'Depos√≠tala en el contenedor amarillo de pl√°sticos',
            'Qu√≠tale el tap√≥n y depos√≠talo en el mismo contenedor'
        ],
        tips: [
            'El pl√°stico PET se puede reciclar m√∫ltiples veces',
            'Una botella reciclada puede convertirse en fibra textil, muebles de jard√≠n o nuevas botellas',
            'No mezcles botellas PET con otros tipos de pl√°stico'
        ]
    },
    'botella de vidrio': {
        type: 'reciclable',
        title: 'Botella de Vidrio',
        description: 'Las botellas de vidrio son envases retornables o reciclables que se utilizan para bebidas y alimentos.',
        instructions: [
            'Vac√≠a completamente la botella',
            'No es necesario enjuagar excesivamente',
            'Depos√≠tala en el contenedor verde espec√≠fico para vidrio',
            'No incluyas tapones de metal o corcho',
            'Separa por colores si tu municipio lo requiere'
        ],
        tips: [
            'El vidrio se recicla al 100% infinitamente',
            'Una botella de vidrio reciclada ahorra la energ√≠a necesaria para mantener encendida una bombilla durante 4 horas',
            'No deposites vidrio plano (ventanas, espejos) en el mismo contenedor'
        ]
    },
    'plato': {
        type: 'no-reciclable',
        title: 'Plato (duroport)',
        description: 'Platos de duroport (espuma de poliestireno) - material no reciclable en la mayor√≠a de sistemas locales.',
        instructions: [
            'Depos√≠talo en el contenedor gris de rechazo',
            'No lo quemes ni lo tires en la naturaleza',
            'Si est√° en buen estado, considera reutilizar o donar'
        ],
        tips: [
            'El duroport no se recicla f√°cilmente en plantas convencionales',
            'Reduce el uso de platos desechables siempre que sea posible'
        ]
    },
    'vaso': {
        type: 'no-reciclable',
        title: 'Vaso (duroport)',
        description: 'Vasos de duroport/espuma (poliestireno expandido) ‚Äî generalmente no reciclables y considerados residuo contaminante.',
        instructions: [
            'Depos√≠talo en el contenedor gris de rechazo',
            'Evita usar vasos desechables de duroport cuando sea posible',
            'Si es un vaso reutilizable, l√≠mpialo y reutil√≠zalo'
        ],
        tips: [
            'Los vasos de espuma no suelen aceptarse en plantas de reciclaje',
            'Prefiere alternativas reutilizables o compostables'
        ]
    },
    'jugo': {
        type: 'reciclable',
        title: 'Caja de Jugo',
        description: 'Envase de cart√≥n para jugos. En muchos sistemas se considera envase reciclable o se procesa separadamente.',
        instructions: [
            'Vac√≠a completamente el contenido',
            'Aplasta la caja para ahorrar espacio',
            'Depos√≠tala en el contenedor de envases/reciclaje seg√∫n tu municipio',
            'Si tu servicio lo requiere, separa el tap√≥n y depos√≠talo en el contenedor correspondiente'
        ],
        tips: [
            'Las cajas de cart√≥n para bebidas pueden requerir tratamiento especial en algunas plantas',
            'Consulta la gu√≠a local de reciclaje para envases multi-capa'
        ]
    },
    'pizza': {
        type: 'reciclable',
        title: 'Caja de Pizza (cart√≥n)',
        description: 'Caja de cart√≥n utilizada para pizza. Si est√° limpia es reciclable; si est√° muy grasosa, puede necesitar ir a merma o rechazo seg√∫n normativa local.',
        instructions: [
            'Si la caja est√° limpia, pliega y depos√≠tala en el contenedor de papel y cart√≥n',
            'Si la caja est√° muy contaminada con grasa o restos, c√≥rtala y depos√≠tala en org√°nicos o rechazo seg√∫n tu municipio',
            'Retira restos grandes de comida antes de reciclar'
        ],
        tips: [
            'Una caja parcialmente limpia puede reciclarse separando la parte grasienta',
            'Cuando dudes, consulta las reglas locales de reciclaje'
        ]
    },
    'organico': {
        type: 'organico',
        title: 'Residuo Org√°nico',
        description: 'Los residuos org√°nicos son ideales para compostaje/abono. Transf√≥rmalos en nutrientes para tus plantas o entr√©galos al sistema de org√°nicos.',
        instructions: [
            'Prioriza el compostaje dom√©stico: depos√≠talo en tu compostera para generar abono',
            'Si no tienes compostera, usa el contenedor marr√≥n de org√°nicos de tu municipio',
            'Corta los restos en trozos peque√±os para acelerar el proceso',
            'No mezcles pl√°sticos, metales o vidrio; usa bolsas compostables si necesitas bolsa'
        ],
        tips: [
            'Mant√©n un buen balance: 2 partes de material seco (hojas/cart√≥n) por 1 de restos de cocina',
            'Evita grandes cantidades de carnes y l√°cteos en compost dom√©stico',
            'Frutas, verduras, posos de caf√©, t√© y c√°scaras son excelentes para hacer abono'
        ]
    },
    'manzana': {
        type: 'organico',
        title: 'Manzana',
        description: 'Las manzanas son perfectas para hacer compost/abono y aportar nutrientes al suelo.',
        instructions: [
            'Dep√≥sitala en tu compostera; si no tienes, usa el contenedor marr√≥n de org√°nicos',
            'C√≥rtala en trozos para acelerar el compostaje',
            'Evita bolsas pl√°sticas; si necesitas, usa compostables o papel',
            'Incluye coraz√≥n y semillas sin problema'
        ],
        tips: [
            'Se descompone en 2-4 semanas en condiciones √≥ptimas',
            'Aporta az√∫cares que activan microorganismos beneficiosos',
            'Mezcla con material seco (hojas/cart√≥n) para evitar exceso de humedad'
        ]
    },
    'banano': {
        type: 'organico',
        title: 'Banana/Pl√°tano',
        description: 'Las bananas y sus c√°scaras son excelentes para compost/abono por su riqueza en potasio.',
        instructions: [
            'A√±ade c√°scaras y restos a tu compostera; como alternativa, usa el contenedor marr√≥n',
            'Trocea c√°scaras para acelerar su descomposici√≥n',
            'Evita bolsas pl√°sticas; prefiere compostables',
            'Incluye la fruta si est√° pasada o en mal estado'
        ],
        tips: [
            'Ricas en potasio: benefician el desarrollo de flores y frutos',
            'Se descomponen r√°pido (1-2 semanas en trozos peque√±os)',
            'Enterr√°ndolas cerca de plantas aportan nutrientes de forma gradual'
        ]
    },
    'limon': {
        type: 'organico',
        title: 'Lim√≥n',
        description: 'Los limones y c√≠tricos pueden compostarse; √∫salos con moderaci√≥n para evitar acidificar en exceso.',
        instructions: [
            'A√±ade c√°scaras y pulpa en peque√±as cantidades a la compostera',
            'Si no compostas, depos√≠talo en el contenedor marr√≥n de org√°nicos',
            'Evita bolsas pl√°sticas; usa compostables',
            'Trocea para acelerar la descomposici√≥n'
        ],
        tips: [
            '√ösalos mezclados con material marr√≥n para equilibrar humedad y acidez',
            'Se descomponen en 2-3 semanas en trozos peque√±os',
            'Las c√°scaras aportan aceites naturales; no excederse para no frenar microorganismos'
        ]
    },
    'huevo': {
        type: 'organico',
        title: 'Huevo',
        description: 'Las c√°scaras de huevo trituradas son excelentes para compost/abono por su aporte de calcio.',
        instructions: [
            'Seca y tritura las c√°scaras antes de a√±adirlas a la compostera',
            'Si no compostas, √∫salas en el contenedor marr√≥n',
            'Evita a√±adir grandes cantidades de restos cocidos grasos',
            'Mezcla con material seco para equilibrar'
        ],
        tips: [
            'Aportan calcio que ayuda a reducir la acidez del compost',
            'Cuanto m√°s trituradas, m√°s r√°pido se integran',
            '√ötiles para suelos y plantas que requieren calcio'
        ]
    },
    'pi√±a': {
        type: 'organico',
        title: 'Pi√±a',
        description: 'La pi√±a y sus residuos (c√°scara, coraz√≥n, hojas) son aptos para compost/abono.',
        instructions: [
            'A√±ade c√°scara, coraz√≥n y hojas a tu compostera; trocea para acelerar',
            'Si no compostas, depos√≠talos en el contenedor marr√≥n de org√°nicos',
            'Mezcla con material seco para evitar exceso de humedad',
            'Evita bolsas pl√°sticas; prefiere compostables'
        ],
        tips: [
            'Contiene enzimas que ayudan a la descomposici√≥n',
            'Se descompone en 3-4 semanas en condiciones favorables',
            'Aporta humedad; equilibra con hojas secas o cart√≥n'
        ]
    },
    'carton de jugo': {
        type: 'reciclable',
        title: 'Cart√≥n de jugo (con pajilla)',
        description: 'Envase de cart√≥n/Tetra Pak t√≠pico de jugos infantiles. Est√° compuesto mayoritariamente por cart√≥n con capas finas de pl√°stico y/o aluminio y suele incluir una pajilla de pl√°stico.',
        instructions: [
            'Vac√≠a y enjuaga bien el envase para evitar malos olores',
            'Retira la pajilla y el envoltorio de la pajilla y depos√≠talos en el contenedor de pl√°sticos seg√∫n normativa local',
            'Aplasta el cart√≥n para ahorrar espacio',
            'Dep√≥sitalo en el contenedor de envases/reciclaje (seg√∫n tu municipio)'
        ],
        tips: [
            'En algunos municipios los Tetra Pak se recogen junto con pl√°sticos y metales (contenedor amarillo); confirma tu gu√≠a local',
            'Si es posible, separa el tap√≥n pl√°stico y rec√≠clalo con los pl√°sticos',
            'Aseg√∫rate de que est√© seco y limpio para mejorar su reciclaje.'
        ]
    },
      'papel': {
    type: 'reciclable',
    title: 'Papel y Cart√≥n',
    description: 'Papel y cart√≥n limpios y secos son materiales reciclables que se procesan para fabricar nuevos productos de papel.',
    instructions: [
        'Retira restos de comida y pl√°sticos adheridos',
        'Aplasta las cajas y d√≥blalas para ahorrar espacio',
        'Depos√≠talo en el contenedor azul o el contenedor de papel y cart√≥n de tu municipio',
        'No incluyas papel encerado o cart√≥n con tratamiento pl√°stico'
    ],
    tips: [
        'El papel debe estar seco y limpio para ser reciclable',
        'Reutiliza cajas cuando sea posible antes de reciclarlas',
        'Evita mezclar papel con residuos org√°nicos o pl√°sticos'
    ]
    },
    'merma': {
        type: 'merma',
        title: 'Merma / Basura',
        description: 'Objetos que han llegado al final de su vida √∫til y no pueden ser reciclados, reutilizados o compostados. Son residuos que deben ir al contenedor de rechazo.',
        instructions: [
            'Depos√≠talo en el contenedor gris de rechazo',
            'Aseg√∫rate de que no contenga materiales peligrosos',
            'Si es un objeto grande, consulta con el servicio de recolecci√≥n especial',
            'No lo quemes ni lo tires en la naturaleza',
            'Si contiene datos personales (documentos, discos), destr√∫yelos antes de desechar'
        ],
        tips: [
            'Antes de desechar, considera si realmente no se puede reparar o reutilizar',
            'Los objetos de merma van a vertederos controlados donde se manejan de forma segura',
            'Evita generar merma innecesaria: compra solo lo que necesites',
            'Si el objeto es muy grande, ll√©valo a un punto limpio o solicita recogida especial',
            'Los residuos peligrosos (pilas, medicamentos, aceites) van a puntos limpios, no al contenedor gris'
        ]
    }
};

// Funci√≥n para determinar el tipo de basura seg√∫n la eiqueta
function getWasteType(label) {
    const normalizedLabel = label.toLowerCase().trim();

    // Buscar coincidencias exactas o parciales
    for (const [key, info] of Object.entries(recyclingInfo)) {
        if (normalizedLabel.includes(key) || key.includes(normalizedLabel)) {
            return info;
        }
    }

    // Si no encuentra coincidencia, devolver informaci√≥n por defecto
    return {
        type: 'no-reciclable',
        title: 'Objeto Desconocido',
        description: 'No se pudo determinar el tipo de este objeto.',
        instructions: [
            'Consulta con tu servicio local de recolecci√≥n de basura',
            'Depos√≠talo en el contenedor gris si no est√°s seguro',
            'Evita tirarlo en la naturaleza'
        ],
        tips: [
            'Considera reutilizar el objeto si es posible',
            'Toma una foto m√°s clara para mejor identificaci√≥n'
        ]
    };
}
function toggleRecyclingInfo() {
    const recyclingContent = document.getElementById('recycling-content');
    const toggleBtn = document.querySelector('.info-toggle-btn');
    
    if (recyclingContent.classList.contains('show')) {
        recyclingContent.classList.remove('show');
        toggleBtn.classList.remove('active');
    } else {

        // Si hay una √∫ltima predicci√≥n v√°lida, mostrar su informaci√≥n; si no, mostrar gu√≠a general de reciclaje
        const labelToShow = lastTopPrediction && lastTopPrediction.className ? lastTopPrediction.className : null;
        updateRecyclingInfo(labelToShow);
        recyclingContent.classList.add('show');
        toggleBtn.classList.add('active');
    }
}

// Funci√≥n para actualizar el contenido del men√∫ desplegable
function updateRecyclingInfo(label) {
    let wasteInfo;

    if (!label) {
        // Contenido por defecto cuando no hay predicci√≥n: gu√≠a b√°sica de reciclaje
        wasteInfo = {
            type: 'info',
            title: 'Informaci√≥n de Reciclaje',
            description: 'Coloca el objeto frente a la c√°mara o sube una imagen para obtener instrucciones espec√≠ficas de reciclaje. Mientras esperas, aqu√≠ tienes informaci√≥n pr√°ctica de reciclaje universal:',
            instructions: [
                'Separa los residuos por tipo: papel/cart√≥n, pl√°stico, vidrio, metal, org√°nico y resto.',
                'Limpia los envases (vac√≠a y enjuaga) para evitar contaminaci√≥n.',
                'Aplasta cajas y botellas para ahorrar espacio en los contenedores.',
                'Deposita cada material en el contenedor correspondiente de tu municipio (p. ej. papel: azul, pl√°sticos/envases: amarillo, vidrio: verde, org√°nico: marr√≥n, resto: gris).'
            ],
            tips: [
                'Evita mezclar materiales; la mezcla contamina lotes de reciclaje.',
                'No deposites residuos peligrosos (pilas, aceites) en los contenedores comunes ‚Äî ll√©valos a puntos limpios.',
                'Si un envase est√° muy grasiento (ej. caja de pizza), considera depositar la parte contaminada en org√°nicos o rechazo seg√∫n normativa local.',
                'Reutiliza y reduce antes de reciclar: reutilizar una caja o botellas es mejor que reciclarlas.'
            ]
        };
    } else {
        wasteInfo = getWasteType(label);
    }

    // Actualizar contenido
    const titleEl = document.getElementById('info-title');
    const descEl = document.getElementById('info-description');
    if (titleEl) titleEl.textContent = wasteInfo.title;
    if (descEl) descEl.textContent = wasteInfo.description;

    // Actualizar tipo con estilos
    const typeElement = document.getElementById('info-type');
    if (typeElement) {
        if (wasteInfo.type === 'reciclable') {
            typeElement.textContent = '‚ôªÔ∏è Reciclable';
        } else if (wasteInfo.type === 'organico') {
            typeElement.textContent = 'üå± Org√°nico';
        } else if (wasteInfo.type === 'merma') {
            typeElement.textContent = 'üóëÔ∏è Merma';
        } else if (wasteInfo.type === 'info') {
            typeElement.textContent = '‚ÑπÔ∏è Informaci√≥n';
        } else {
            typeElement.textContent = '‚ùå No Reciclable';
        }
        typeElement.className = `info-type-badge ${wasteInfo.type}`;
    }

    const instructionsContainer = document.getElementById('info-instructions');
    const tipsContainer = document.getElementById('info-tips');

    if (instructionsContainer) {
        if (Array.isArray(wasteInfo.instructions) && wasteInfo.instructions.length > 0) {
            instructionsContainer.innerHTML = '<ul>' + wasteInfo.instructions.map(i => `<li>${i}</li>`).join('') + '</ul>';
        } else {
            instructionsContainer.innerHTML = '<p>No hay instrucciones espec√≠ficas para este objeto. Consulta las normas locales.</p>';
        }
    }

    if (tipsContainer) {
        if (Array.isArray(wasteInfo.tips) && wasteInfo.tips.length > 0) {
            tipsContainer.innerHTML = '<ul>' + wasteInfo.tips.map(t => `<li>${t}</li>`).join('') + '</ul>';
        } else {
            tipsContainer.innerHTML = '<p>No hay consejos adicionales disponibles.</p>';
        }
    }
}

function clearResults() {
    const pred = document.getElementById('prediction');
    const conf = document.getElementById('confidence');
    
    if (pred) pred.textContent = 'Esperando clasificaci√≥n...';
    if (conf) conf.textContent = '';
    
    lastTopPrediction = null;
    // Restaurar gu√≠a general en el men√∫ de reciclaje
    try {
        updateRecyclingInfo(null);
    } catch (e) {
        console.warn('clearResults: no se pudo actualizar recycling info:', e);
    }
    
    const recyclingContent = document.getElementById('recycling-content');
    const toggleBtn = document.querySelector('.info-toggle-btn');
    if (recyclingContent) recyclingContent.classList.remove('show');
    if (toggleBtn) toggleBtn.classList.remove('active');
}

window.addEventListener('DOMContentLoaded', initApp);
